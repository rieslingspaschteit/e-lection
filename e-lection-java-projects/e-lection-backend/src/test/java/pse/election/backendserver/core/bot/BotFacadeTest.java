package pse.election.backendserver.core.bot;

import static org.mockito.Mockito.when;

import com.sunya.electionguard.ElectionCryptoContext;
import com.sunya.electionguard.Group;
import java.math.BigInteger;
import java.time.Instant;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import pse.election.backendserver.core.electionguard.DecryptionFacade;
import pse.election.backendserver.core.service.BallotService;
import pse.election.backendserver.core.service.DecryptionService;
import pse.election.backendserver.core.service.TallyService;
import pse.election.backendserver.core.service.TrusteeService;
import pse.election.backendserver.entity.Ballot;
import pse.election.backendserver.entity.BotTrustee;
import pse.election.backendserver.entity.Election;
import pse.election.backendserver.entity.OptionEncrypted;
import pse.election.backendserver.entity.Tally;
import pse.election.backendserver.payload.response.record.ElectionGuardInitializedWrapper;

@ExtendWith(MockitoExtension.class)
class BotFacadeTest {

  @Mock
  private TrusteeService mockTrusteeService;
  @Mock
  private TallyService mockTallyService;
  @Mock
  private BallotService mockBallotService;
  @Mock
  private DecryptionService mockDecryptionService;

  @Mock
  private ElectionGuardInitializedWrapper electionGuardInitializedWrapper;
  @InjectMocks
  private BotFacade botFacadeUnderTest;

  /**
   * Example taken from. Doesn't work completely because Bot isn't fully implemented. Link{<a
   * href="https://github.com/JohnLCaron/electionguard-java/tree/master/core/src/test/data/python/sample_election_record">...</a>}
   */
  @Test
  void testPartialDecryption() {
    // Setup
    final Election election = new Election(Date.from(Instant.parse("2023-02-01T12:00:00Z")),
        "title", "description",
        "authorityEmail", false, 0);

    // Configure TrusteeService.getBotTrustee(...).
    final BotTrustee botTrustee = new BotTrustee(0L,
        // Private ElGamal Key

        0L, "privateAuxKey");
    //when(mockTrusteeService.getBotTrustee(0L)).thenReturn(botTrustee);

    // Configure TallyService.getAllTalliesOfElection(...).
    final List<Tally> tallyList = List.of(
        new Tally(0L, 0, 0,
            "013E131D6567DCAD3D4833B28182F42843312AB7573CEEC140F78F7FE4BA160BA7ADB4B33EC6941C453359DD5F86F116B869470F6E75CC50F5027BBFDF03F9DD670E53EFA4B1E62BCC01AA5EA6CD044AC64626272DE5F96E4D029C054D04D83EED3DF4B54CF97C26ECADF75F33F9990B2E003A1BABF3CFEE941BE1A5C5574A7F158E047B1368C5C0C405D370530C1B256ED25567BDDF4821F90D62D9D23972954D158A63D489D573CC1F27BA588D0FAB6DE5EB5C3A85A5CB30907A6CCD465ED0D5DD649E83865955108243179778DEB6487E2DC6407C23C2A0D75F32A32A7299DE2C2B964D9F98406C9245C1C2A85D04EE2977F6AE42A1BAD6F5980C0DD461C36B6EE1F75A52BB4A7D48ADE6C5B6CE8560559248D0AEF051CE47919BA0A18113280D6F2E62E0D1EF36C2CC9A99FE0743E95D02D5C5BB5AC03F8DD9D635D66797DAE177246B4C0D21AE2D833BD740850FFA02581CF667A7C37D7A2016B78467D902A4938B027C615265593FC51C7747D1A9AAABF0FC6B7136968414420C71C84475D1FB50B452DB9CCE8190E120DD4B5E51F88142D250E2D738DCA56FDBC591D08BE7391E7C61174C30D4471ABF3C857D7468BFE31C6C1758E9698B58028F27C3B2042C9D4E0A4103CED34A25AED5FF71E188E036571FEB051A118A0D99C5514CC1CAD3B9E18FF4084B5CEA902428B8717CE8A500EB839CED8DF31403034178EC",
            "09BC589669CFD9BCC52F0F655056F4CCED952A02D6E4B80F3A8CD29140F0CA29405BC461C1DD949E146B32D2676370362C7A91CD20921C5F095B0045E613A33C017BD297C275283F22B8598AF99F7050054306DE8DAC7C2A93ED970505F83E1FE19179D1204A9B51B6AB3A60828D5544373628A21E5B9ECD6D6045296DDEB38DF37C4CA97DE2B15D717CB6B13ECA8C04378BC471BF4BB464244C455B68A02406B8CB9F825EDE30549438137CC3C65688A6B6DD3B19D3D745902971AC606E2DE6156A7853695F104FB6F92B560BCD3E62AFEAD498ED2AE73789602CAB79581A3376D85F84AFC084CB971182ADA9D1B9FE08E50606E3A5339AC3A6416CB492836DA0DE52AE75794B0E5DA3E33D1E0E02B96847168A83076AE4D2BAF58706A65C9FECDBC3A5C20532DD031D82DC32DEA958DCE5851C21034421E76479A0AA9CA11DCBE0049844A5E45D330AA81F46F7D499F3D113AFFCDC60A51131E451B5296FA8F0D480AC424F9E0A96B1D5451491C0D311FA595345EE9C5F463322572DE0B480A031D0CF8E4E277CFFDFA12C88CF684DB13DBBD02907FEC4B743040C1F2A0F4641F46CC70387C639A67EAF89311D25D13C7B7510A9DF085CED5EDF709039004BD0D8EF70F076784135F89125B69DC9FA513995DCC9445AA967F30A19595D4172CFD5335AA06168087FFD1708AC32844DC86140B0089DB6E7B7FCB3EAA75EEDD2"));
    when(mockTallyService.getAllTalliesOfElection(0L)).thenReturn(tallyList);

    // Configure ElectionGuardInitializedWrapper.generateCryptoContext(...).
    final ElectionCryptoContext electionCryptoContext =
        new ElectionCryptoContext(0, 0,
            // Joint Public Key
            Group.int_to_p_unchecked(new BigInteger(
                "CCFF0E7D94D931E63C33CB0200C3AC8767E29856D728BA050EACAA98B0DF65E818E6E1DDFFB3CEBE3B06B865928160CE25518F0DAAC69C90A47F7728FD376F7DCC999943272EF7B172A65C477225B72E15712BE31C8185C214731D25191A02251B6987270C706FD45606624E8B6453639EA13BD4EAA20195A030FD114731D801E0DEDCA4C9A6999404102FE60545166438C3E1568FA54ACCBBC7BE1AEDDA449E0D738249C3609773905A160A4EF6AD437BED09EAF8ADB3E63251A88086B15A95629AFC8DBFE8557F190F9283FAC2EFD7695636A2177E60B28C670990A80AD9E9848A3D9EE3AFD5321C84201A62469BD7B43A2F132B941FC430F35CB9907DC902510F405D4AE8B8F764BABC1739F3A1ACCE33E0D474134D2AD66C6245EE8BE7D5DAB869E5E9D29F0144CA2E713E5A1DBC181CFAB90B1829103AEB2B006EBC9F37138FEE8EEFEDFD0630F044EFB8720D82F140824AD05279C9B9869DE71963A44B7A1E21296AF58C2A896A24B01CD87E238BA718615FB89624624245A3682B9AB03799A3BE8C5257893F8358782CB0C7DB9004EE6636CC4367308A7428E8F65CDD4709486CFE34277583EB28B7493421A515A2DB3445A375D29418CE1B2A37F74929D4285ED7E4B24BBDA670208D80CE0122317D01C4F8E59219B5C3F8E2D958F490FA2033E2BF1D245E468206953CFECEBEF75BC96771020E53F4F6731B7AD52A",
                16)),
            // Manifest Hash
            Group.int_to_q_unchecked(
                new BigInteger("C2DB999CFEC53C050F14E776A4203BAAC1E76E1A959C7281A63C2EC110D3B87D",
                    16)),
            // Crypto Base hash
            Group.int_to_q_unchecked(
                new BigInteger("C2A51684F8EFEECF08F772FDA24479A93FEADEEED42BB328BFF95396FE663FA7",
                    16)),
            // Extended Base Hash
            Group.int_to_q_unchecked(
                new BigInteger("3B9AAA4EB69D4A36396316F65A10B8BF7663CF6ACBEAEF25152A3672E6960E55",
                    16)),
            // comitmentHash
            Group.int_to_q_unchecked(
                new BigInteger("F1FFA5F36834B62007BDF810F70437A176F34192CBB9C7BD1F00C2602C7E347B",
                    16)),
            Map.ofEntries(Map.entry("value", "value")));

    when(
        electionGuardInitializedWrapper.generateCryptoContext(election.getElectionId())).thenReturn(
        electionCryptoContext);
    // Configure BallotService.getAllSpoiledBallotsOfElection(...).
    final List<Ballot> ballots = new
        ArrayList<>();
    //when(mockBallotService.getAllSpoiledBallotsOfElection(0L)).thenReturn(ballots);

    // Configure BallotService.getAllOptionsEncryptedOfBallot(...).
    final List<OptionEncrypted> optionEncryptedList = List.of(
        new OptionEncrypted(0L, 0L, 0, 0, "ciphertextPAD", "ciphertextDATA", "individualProof",
            "accumulatedProof"));

    // Run the test
    Map<Long, DecryptionFacade.Decryption> result = botFacadeUnderTest.decryptTalliesOfElection(
        election,
        Group.int_to_q_unchecked(new BigInteger(

            16)));

    for (Map.Entry<Long, DecryptionFacade.Decryption> elem : result.entrySet()) {
      System.out.printf(elem.toString());
    }
  }
}
